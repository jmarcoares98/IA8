{"version":3,"sources":["AppMode.js","components/NavBar.js","components/SideMenu.js","components/ModeBar.js","components/LoginPage.js","components/DataAdd.js","components/FloatingButton.js","components/DataDisplay.js","components/DataPage.js","components/ConstructionPage.js","components/App.js","serviceWorker.js","index.js","delta.png"],"names":["AppMode","LOGIN","DATA","DATA_ADD","DATA_EDIT","CONSTRUCTION","Object","freeze","NavBar","handleMenuBtnClick","props","mode","DISPLAY_ADDDATA","DISPLAY_EDITDATA","changeMode","DISPLAY","toggleMenuOpen","getMenuBtnIcon","menuOpen","className","onClick","this","id","src","Delta","alt","height","width","title","React","Component","SideMenu","renderModeMenuItems","userId","showAbout","ModeBar","handleModeBtnClick","newMode","LoginPage","handleLogin","setState","loginBtnIcon","loginBtnLabel","setUserId","emailInputRef","current","value","handleLoginSubmit","event","preventDefault","setTimeout","checkAccountValidity","state","accountPassword","accountPasswordRepeat","repeatPassRef","setCustomValidity","data","JSON","parse","localStorage","getItem","hasOwnProperty","accountName","newUserRef","handleNewAccountChange","target","name","handleCreateAccount","accountInfo","password","securityQuestion","accountSecurityQuestion","securityAnswer","accountSecurityAnswer","nameCount","setItem","stringify","handleLoginChange","thisUser","passwordInputRef","renderAccountDialog","role","showLookUpAccountDialog","onSubmit","type","size","placeholder","pattern","ref","required","onChange","rows","cols","maxLength","handleLookUpAccount","accountEmailRef","resetEmail","resetQuestion","resetAnswer","showSecurityQuestionDialog","alert","focus","renderLookUpAccountDialog","handleSecurityQuestionResponse","securityAnswerRef","select","showPasswordResetDialog","renderSecurityQuestionDialog","readOnly","handleResetPassword","resetPasswordRef","resetPasswordRepeatRef","renderPasswordResetDialog","showResetPasswordDialog","createRef","showAccountDialog","htmlFor","style","padding","fontSize","DataAdd","handleChange","handleSubmit","faIcon","btnLabel","thisData","saveData","today","Date","now","getTimezoneOffset","birthday","toISOString","substr","startData","FloatingButton","handleClick","icon","DataDisplay","editData","setEditId","confirmDelete","setDeleteId","doDelete","deleteData","cancelDelete","renderConfirmDeleteDialog","renderTable","table","r","push","key","keys","length","colSpan","fontStyle","DataPage","val","deleteId","editId","newData","newName","addData","nameNum","Fragment","ConstructionPage","modeTitle","modeToPage","App","handleChangeMode","openMenu","closeMenu","prevState","Id","stopPropagation","toggleAbout","renderAbout","textAlign","href","window","addEventListener","ModePage","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.c3ac3e4f.chunk.js","sourcesContent":["/* AppMode: The enumerated type for AppMode. If we were using TypeScript, we could\r\nuse the predefined enum type; see\r\nhttps://www.typescriptlang.org/docs/handbook/enums.html. Declaring an enumerated\r\ntype as a JavaScript object has important limitations (see\r\nhttps://stackoverflow.com/questions/287903/what-is-the-preferred-syntax-for-defining-enums-in-javascript),\r\nbut it will do for our purposes*/\r\n\r\nconst AppMode = {\r\n    LOGIN: \"LoginMode\",\r\n    DATA: \"DataMode\",\r\n    DATA_ADD: \"DataMode-Add\",\r\n    DATA_EDIT: \"DataMode-Edit\",\r\n    CONSTRUCTION: \"ConstructionMode\",\r\n};\r\n\r\nObject.freeze(AppMode); //This ensures that the object is immutable.\r\n\r\nexport default AppMode;","import React from 'react';\r\nimport AppMode from './../AppMode.js';\r\nimport Delta from './../delta.png'\r\n\r\nclass NavBar extends React.Component {\r\n\r\n    handleMenuBtnClick = () => {\r\n      if (this.props.mode === AppMode.DISPLAY_ADDDATA ||\r\n          this.props.mode === AppMode.DISPLAY_EDITDATA) {\r\n        this.props.changeMode(AppMode.DISPLAY);\r\n      } else if (this.props.mode !== AppMode.LOGIN) {\r\n        this.props.toggleMenuOpen();\r\n      }\r\n    }\r\n\r\n    getMenuBtnIcon = () => {\r\n      if (this.props.mode === AppMode.DISPLAY_ADDDATA || \r\n          this.props.mode === AppMode.DISPLAY_EDITDATA)\r\n          return \"fa fa-arrow-left\";\r\n      if (this.props.menuOpen)\r\n        return \"fa fa-times\";\r\n      return \"fa fa-bars\";\r\n    }\r\n\r\n    render() {\r\n       return (\r\n        <div className=\"navbar\">  \r\n        <span className=\"navbar-items\">\r\n          <button className=\"sidemenu-btn\" onClick={this.handleMenuBtnClick}>\r\n            <span id=\"sidemenu-btn-icon\" \r\n              className={\"sidemenu-btn-icon \" + this.getMenuBtnIcon()}>\r\n            </span>\r\n          </button>\r\n          <img src={Delta} alt=\"Delta Logo\" height=\"38px\"\r\n          width=\"38px\" />\r\n          <span id=\"topBarTitle\" className=\"navbar-title\">\r\n            &nbsp;{this.props.title}\r\n          </span>\r\n        </span>\r\n      </div>\r\n    ); \r\n  }\r\n}\r\n\r\nexport default NavBar;","  import React from 'react';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass SideMenu extends React.Component {\r\n\r\n  //renderModeItems -- Renders correct subset of mode menu items based on\r\n  //current mode, which is stored in this.prop.mode. Uses switch statement to\r\n  //determine mode.\r\n  renderModeMenuItems = () => {\r\n    switch (this.props.mode) {\r\n      case AppMode.DATA:\r\n        return(\r\n          <div>\r\n          <a className=\"sidemenu-item\" onClick={() => this.props.changeMode(AppMode.DATA_ADD)}>\r\n              <span className=\"fa fa-plus\"></span>&nbsp;add data</a>\r\n          </div>\r\n        );\r\n      break;\r\n      case AppMode.CONSTRUCTION:\r\n        return(\r\n          <div>\r\n            <a className=\"sidemenu-item\">\r\n              <span className=\"fa fa-wrench\"></span>&nbsp;still fixing</a>\r\n            <a className=\"menuItem\">\r\n              <span className=\"fa fa-wrench\"></span>&nbsp;still fixing</a>\r\n          </div>\r\n        );\r\n      default:\r\n          return null;\r\n      }\r\n  }\r\n\r\n    \r\n    render() {\r\n       return (\r\n        <div className= {\"sidemenu \" + \r\n        (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")} >\r\n          {/* SIDE MENU TITLE */}\r\n          <div className=\"sidemenu-title\">\r\n            <span className=\"sidemenu-userID\">&nbsp;{this.props.userId}</span>\r\n          </div>\r\n          {/* MENU CONTENT */}\r\n          {/*Mode-based menu items */}\r\n          {this.renderModeMenuItems()}\r\n          {/* Always-there menu items */}\r\n          <a className=\"sidemenu-item\" onClick={this.props.showAbout}><span className=\"fa fa-info-circle\">\r\n              </span>&nbsp;about</a>\r\n          <a className=\"sidemenu-item\" onClick={() => this.props.changeMode(AppMode.LOGIN)}><span className=\"fa fa-sign-out\">\r\n              </span>&nbsp;log out</a>\r\n        </div>\r\n        );\r\n    }\r\n  }\r\n\r\nexport default SideMenu;","import React from 'react';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass ModeBar extends React.Component {\r\n\r\n    handleModeBtnClick = (newMode) => {\r\n      if (this.props.mode != newMode) {\r\n          this.props.changeMode(newMode);\r\n      }\r\n    }\r\n  \r\n    render() {\r\n      return(\r\n        <div className={\"modebar\" + (this.props.mode === AppMode.LOGIN ? \r\n          \" invisible\" : \" visible\")}>\r\n          <a className={\"modebar-btn\" + \r\n            (this.props.mode === AppMode.DISPLAY ? \" modebar-item-selected\" : \"\")} \r\n            onClick={this.props.menuOpen ? null : \r\n              () => this.handleModeBtnClick(AppMode.DATA)}>\r\n            <span className=\"modebar-icon nonMenuItem fa fa-th-list\"></span>\r\n            <span className=\"modebar-text\">display</span>\r\n          </a>\r\n          <a className={\"modebar-btn\" +\r\n            (this.props.mode === AppMode.CONSTRUCTION ? \" modebar-item-selected\" : \"\")} \r\n            onClick={this.props.menuOpen ? null : \r\n              () => this.handleModeBtnClick(AppMode.CONSTRUCTION)}>\r\n            <span className=\"modebar-icon fa fa-wrench\"></span>\r\n            <span className=\"modebar-text\">under construction</span>\r\n          </a>\r\n        </div>\r\n      );\r\n    }\r\n\r\n}\r\n\r\nexport default ModeBar;","//code from class\r\nimport React from 'react';\r\nimport AppMode from \"./../AppMode.js\";\r\n\r\nclass LoginPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        //Create a ref for the email input DOM element\r\n        this.emailInputRef = React.createRef();\r\n        this.passwordInputRef = React.createRef();\r\n        this.repeatPassRef = React.createRef();\r\n        this.newUserRef = React.createRef();\r\n        this.accountEmailRef = React.createRef();\r\n        this.securityAnswerRef = React.createRef();\r\n        this.resetPasswordRef = React.createRef();\r\n        this.resetPasswordRepeatRef = React.createRef();\r\n        this.state = {loginBtnIcon: \"fa fa-sign-in\",\r\n                      loginBtnLabel: \"Log In\",\r\n                      showAccountDialog: false,\r\n                      showLookUpAccountDialog: false,\r\n                      showSecurityQuestionDialog: false,\r\n                      showPasswordResetDialog: false,\r\n                      resetEmail: \"\",\r\n                      resetQuestion: \"\",\r\n                      resetAnswer: \"\",\r\n                      accountName: \"\",\r\n                      accountPassword: \"\",\r\n                      accountPasswordRepeat: \"\",\r\n                      accountSecurityQuestion: \"\",\r\n                      accountSecurityAnswer: \"\"};\r\n    }\r\n\r\n//Focus cursor in email input field when mounted\r\n    componentDidMount() {\r\n        this.emailInputRef.current.focus();\r\n}\r\n\r\n//handleLogin -- Callback function that sets up initial app state upon login.\r\nhandleLogin = () => {\r\n    //Stop spinner\r\n    this.setState({loginBtnIcon: \"fa fa-sign-in\",\r\n                loginBtnLabel: \"Log In\"});\r\n    //Set current user\r\n    this.props.setUserId(this.emailInputRef.current.value);\r\n    //Trigger switch to FEED mode (default app landing page)\r\n    this.props.changeMode(AppMode.DATA);\r\n}\r\n\r\n//handleLoginSubmit -- Called when user clicks on login button. Initiate spinner\r\n//for 1 second and call handleLogin to do the work.\r\nhandleLoginSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\r\n                    loginBtnLabel: \"Logging In...\"});\r\n    //Initiate spinner for 1 second\r\n    setTimeout(this.handleLogin,1000);\r\n}\r\n\r\n//checkAccountValidity -- Callback function invoked after a form element in\r\n//the 'Create Account' dialog box changes and component state has been\r\n//updated. We need to check whether the passwords match and whether an\r\n//account is already associated with the email address entered. If so, we\r\n//set a custom validity message to be displayed when the user clicks the\r\n//'Create Account' button. Otherwise, we reset the custom validity message\r\n//to empty so that it will NOT fire when the user clicks 'Create Account'.\r\ncheckAccountValidity = () => {\r\n    if (this.state.accountPassword != this.state.accountPasswordRepeat) {\r\n        //Passwords don't match\r\n        this.repeatPassRef.current.setCustomValidity(\"This password must match original password.\");\r\n    } else {\r\n        this.repeatPassRef.current.setCustomValidity(\"\");\r\n    }\r\n    let data = JSON.parse(localStorage.getItem(\"userData\"));\r\n    if (data != null && data.hasOwnProperty(this.state.accountName)) {\r\n        //The user name is already taken\r\n        this.newUserRef.current.setCustomValidity(\"An account already exists under this email address. Use 'Reset password' to recover the password.\");\r\n    } else {\r\n        this.newUserRef.current.setCustomValidity(\"\");\r\n    }\r\n}\r\n    \r\n//handleNewAccountChange -- Called when a field in a dialog box form changes.\r\n//Update corresponding state variable and potentially update the custom\r\n//message.\r\nhandleNewAccountChange = (event) => {\r\n    this.setState({[event.target.name]: event.target.value},this.checkAccountValidity);\r\n}\r\n\r\n//handleCreateAccount -- Triggered when user clicks on \"Create Account.\"\r\n//Custom data checking ensures user account under this email does not exist\r\n//and that the rest of the info is valid. At this point, we can create \r\n//new object for user, save to localStorage and take user to app's landing page. \r\nhandleCreateAccount = (event) => {\r\n    event.preventDefault();\r\n    let data = JSON.parse(localStorage.getItem(\"userData\"));\r\n    //Create fresh user data object for new user\r\n    if (data == null) {\r\n        data = {}; //create empty data object\r\n    }\r\n    data[this.state.accountName] = {\r\n        accountInfo: {\r\n        password: this.state.accountPassword,\r\n        securityQuestion: this.state.accountSecurityQuestion,\r\n        securityAnswer: this.state.accountSecurityAnswer\r\n        },\r\n        name: {}, \r\n        nameCount: 0\r\n    };\r\n    //Commit to localStorage:\r\n    localStorage.setItem(\"userData\",JSON.stringify(data));\r\n    //Set current user\r\n    this.props.setUserId(this.state.accountName);\r\n    //Log in user by switching to FEED mode\r\n    this.props.changeMode(AppMode.DATA);\r\n}\r\n\r\n//handleLoginChange -- Check the validity of the username (email address)\r\n//password entered into the login page, setting the customValidity message \r\n//appropriately. \r\nhandleLoginChange = (event) => {\r\n    let thisUser = this.emailInputRef.current.value;\r\n    let data = JSON.parse(localStorage.getItem(\"userData\"));\r\n    //Check username and password:\r\n    if (data == null || !data.hasOwnProperty(thisUser)) { \r\n       this.emailInputRef.current.setCustomValidity(\"No account with this email address exists. Choose 'Create an account'.\");\r\n         return; //Exit the function; no need to check pw validity\r\n     } else {\r\n         this.emailInputRef.current.setCustomValidity(\"\");\r\n     }\r\n     if (data[thisUser].accountInfo.password != this.passwordInputRef.current.value) {\r\n        this.passwordInputRef.current.setCustomValidity(\"The password you entered is incorrect. Please try again or choose 'Reset your password'.\");\r\n     } else {\r\n        this.passwordInputRef.current.setCustomValidity(\"\");\r\n     }\r\n }\r\n \r\n        \r\n    //renderAccountDialog -- Present the \"create account\" dialog\r\n    renderAccountDialog = () => {\r\n        return (\r\n        <div className=\"modal\" role=\"dialog\">\r\n          <div className=\"modal-dialog modal-lg\">\r\n            <div className=\"modal-content\">\r\n              <div className=\"modal-header\">\r\n                <h3 className=\"modal-title\"><b>Create New Account</b>\r\n                  <button className=\"close-modal-button\" \r\n                    onClick={() => {this.setState({showLookUpAccountDialog: false})}}>\r\n                    &times;</button>\r\n                </h3>\r\n              </div>\r\n              <div className=\"modal-body\">\r\n                <form onSubmit={this.handleCreateAccount}>\r\n                <label>\r\n                    Email: \r\n                    <input\r\n                    className=\"form-control form-text\"\r\n                    name=\"accountName\"\r\n                    type=\"email\"\r\n                    size=\"35\"\r\n                    placeholder=\"Enter Email Address\"\r\n                    pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                    ref={this.newUserRef}\r\n                    required={true}\r\n                    value={this.state.accountName}\r\n                    onChange={this.handleNewAccountChange}\r\n                    />\r\n                </label>\r\n                \r\n                <label>\r\n                    Password:\r\n                    <input\r\n                    className=\"form-control form-text\"\r\n                    name=\"accountPassword\"\r\n                    type=\"password\"\r\n                    size=\"35\"\r\n                    placeholder=\"Enter Password\"\r\n                    pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                    required={true}\r\n                    ref={this.repeatPassRef}\r\n                    value={this.state.accountPassword}\r\n                    onChange={this.handleNewAccountChange}\r\n                    />\r\n                </label>\r\n                \r\n                <label>\r\n                    Repeat Password:\r\n                    <input\r\n                    className=\"form-control form-text\"\r\n                    name=\"accountPasswordRepeat\"\r\n                    type=\"password\"\r\n                    size=\"35\"\r\n                    placeholder=\"Repeat Password\"\r\n                    required={true}\r\n                    ref={this.repeatPassRef}\r\n                    value={this.state.accountPasswordRepeat}\r\n                    onChange={this.handleNewAccountChange}\r\n                    />\r\n                </label>\r\n                \r\n                <label>\r\n                    Security Question:\r\n                    <textarea\r\n                    className=\"form-control form-text\"\r\n                    name=\"accountSecurityQuestion\"\r\n                    size=\"35\"\r\n                    placeholder=\"Security Question\"\r\n                    rows=\"2\"\r\n                    cols=\"35\"\r\n                    maxLength=\"100\"\r\n                    required={true}\r\n                    value={this.state.accountSecurityQuestion}\r\n                    onChange={this.handleNewAccountChange}\r\n                    />\r\n                </label>\r\n                <label>\r\n                    Answer to Security Question:\r\n                    <textarea\r\n                    className=\"form-control form-text\"\r\n                    name=\"accountSecurityAnswer\"\r\n                    type=\"text\"\r\n                    placeholder=\"Answer\"\r\n                    rows=\"2\"\r\n                    cols=\"35\"\r\n                    maxLength=\"100\"\r\n                    required={true}\r\n                    value={this.state.accountSecurityAnswer}\r\n                    onChange={this.handleNewAccountChange}\r\n                    />\r\n                </label>\r\n                <button role=\"submit\" className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                    <span className=\"fa fa-user-plus\"></span>&nbsp;Create Account\r\n                </button>\r\n                </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    </div>\r\n    );\r\n\r\n}\r\n\r\n//handleLookUpAccount: When the user clicks on the \"Look Up Account\" dialog box\r\n//button, we check whether the account exists. If it does, we update the state,\r\n//setting the resetEmail var to the email entered, hiding the current dialog box\r\n//and showing the security question dialog box.\r\nhandleLookUpAccount = (event) => {\r\n    event.preventDefault();\r\n    let thisUser = this.accountEmailRef.current.value;\r\n    let data = JSON.parse(localStorage.getItem(\"userData\"));\r\n    //Check username and password:\r\n    if (data == null || !data.hasOwnProperty(thisUser)) { \r\n        alert(\"Sorry, there is no account associated with this email address.\");\r\n        this.accountEmailRef.current.focus();\r\n    } else {\r\n        this.setState({resetEmail: thisUser, \r\n                       resetQuestion: data[thisUser].accountInfo.securityQuestion,\r\n                       resetAnswer: data[thisUser].accountInfo.securityAnswer,\r\n                       showLookUpAccountDialog: false, \r\n                       showSecurityQuestionDialog: true});\r\n    }\r\n}\r\n\r\n//renderLookUpAccountDialog -- Present a dialog box for user to enter the email address\r\n//associated with their account in case where they want to reset password\r\nrenderLookUpAccountDialog = () => {\r\n    return (\r\n    <div className=\"modal\" role=\"dialog\">\r\n      <div className=\"modal-dialog modal-lg\">\r\n        <div className=\"modal-content\">\r\n          <div className=\"modal-header\">\r\n            <h3 className=\"modal-title\"><b>Look Up Account</b>\r\n              <button className=\"close-modal-button\" \r\n                onClick={() => {this.setState({showLookUpAccountDialog: false})}}>\r\n                &times;</button>\r\n            </h3>\r\n          </div>\r\n          <div className=\"modal-body\">\r\n            <form onSubmit={this.handleLookUpAccount}>\r\n            <label>\r\n                Account Email Address: \r\n                <input\r\n                className=\"form-control form-text\"\r\n                type=\"email\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Email Address\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                ref={this.accountEmailRef}\r\n                required={true}\r\n                />\r\n            </label>\r\n            <button type=\"submit\" className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                <span className=\"fa fa-search\"></span>&nbsp;Look Up Account\r\n            </button>\r\n            </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  );  \r\n}\r\n\r\n//handleSecurityQuestionResponse: When the user clicks on the \"Check Answer\" dialog box\r\n//button, we check whether the security question answer is correct. If it is,\r\n//present dialog box for resetting the password. \r\nhandleSecurityQuestionResponse = (event) => {\r\n    event.preventDefault();\r\n    let response = this.securityAnswerRef.current.value;\r\n    if (response != this.state.resetAnswer) { \r\n        alert(\"Sorry, that is not the correct answer to the security question.\");\r\n        this.securityAnswerRef.current.select();\r\n    } else {\r\n        this.setState({showSecurityQuestionDialog: false, \r\n                       showPasswordResetDialog: true});\r\n    }\r\n}\r\n\r\n//renderSecurityQuestionDialog -- Present a dialog box for user to enter answer\r\n//to their security question.\r\nrenderSecurityQuestionDialog = () => {\r\n    return (\r\n    <div className=\"modal\" role=\"dialog\">\r\n      <div className=\"modal-dialog modal-lg\">\r\n        <div className=\"modal-content\">\r\n          <div className=\"modal-header\">\r\n            <h3 className=\"modal-title\"><b>Answer Security Question</b>\r\n              <button className=\"close-modal-button\" \r\n                onClick={() => {this.setState({resetEmail: \"\", \r\n                                 resetQuestion: \"\",\r\n                                 resetAnswer: \"\",\r\n                                 showSecurityQuestionDialog: false})}}>\r\n                &times;</button>\r\n            </h3>\r\n          </div>\r\n          <div className=\"modal-body\">\r\n            <form onSubmit={this.handleSecurityQuestionResponse}>\r\n            <label>\r\n                Security Question: \r\n                <textarea\r\n                readOnly={true}\r\n                value={this.state.resetQuestion}\r\n                className=\"form-control form-text\"\r\n                rows=\"3\"\r\n                cols=\"35\"\r\n                />\r\n            </label>\r\n            <label>\r\n                Security Answer: \r\n                <textarea\r\n                className=\"form-control form-text\"\r\n                placeholder=\"Enter Security Question Answer\"\r\n                ref={this.securityAnswerRef}\r\n                rows=\"3\"\r\n                cols=\"35\"\r\n                />\r\n            </label>\r\n            <button role=\"submit\" className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                <span className=\"fa fa-check\"></span>&nbsp;Verify Answer\r\n            </button>\r\n            </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  );\r\n}\r\n\r\n//handleResetPassword: When the user clicks on the \"Reset Password\" dialog box\r\n//button, we need check whether the passwords match. If they do,\r\n//we reset the password and log the user in. \r\nhandleResetPassword = (event) => {\r\n    event.preventDefault();\r\n   \r\n    if (this.resetPasswordRef.current.value != this.resetPasswordRepeatRef.current.value) { \r\n        alert(\"Sorry, The passwords you entered do not match. Please try again.\");\r\n        this.resetPasswordRepeatRef.current.select();\r\n    } else { //Reset password and log user in\r\n        let data = JSON.parse(localStorage.getItem(\"userData\"));\r\n        data[this.state.resetEmail].accountInfo.password = this.resetPasswordRef.current.value;\r\n        localStorage.setItem(\"userData\",JSON.stringify(data));\r\n        this.props.setUserId(this.state.resetEmail);\r\n        this.props.changeMode(AppMode.DATA);\r\n        this.setState({resetEmail: \"\", \r\n                       resetQuestion: \"\",\r\n                       resetAnswer: \"\",\r\n                       showPasswordResetDialog: false});\r\n    }\r\n}\r\n\r\n//renderPasswordResetDialog -- Present a dialog box for user to enter answer\r\n//to their security question.\r\nrenderPasswordResetDialog = () => {\r\n    return (\r\n    <div className=\"modal\" role=\"dialog\">\r\n      <div className=\"modal-dialog modal-lg\">\r\n        <div className=\"modal-content\">\r\n          <div className=\"modal-header\">\r\n            <h3 className=\"modal-title\"><b>Reset Password</b>\r\n              <button className=\"close-modal-button\" \r\n                onClick={() => {this.setState({resetEmail: \"\", \r\n                                 resetQuestion: \"\",\r\n                                 resetAnswer: \"\",\r\n                                 showResetPasswordDialog: false})}}>\r\n                &times;</button>\r\n            </h3>\r\n          </div>\r\n          <div className=\"modal-body\">\r\n            <form onSubmit={this.handleResetPassword}>\r\n            <label>\r\n                New Password: \r\n                <input\r\n                type=\"password\"\r\n                placeholder=\"Enter new password\"\r\n                pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                className=\"form-control form-text\"\r\n                ref={this.resetPasswordRef}\r\n                />\r\n            </label>\r\n            <label>\r\n                Repeat New Password: \r\n                <input\r\n                type=\"password\"\r\n                placeholder=\"Repeat new password\"\r\n                className=\"form-control form-text\"\r\n                ref={this.resetPasswordRepeatRef}\r\n                />\r\n            </label>\r\n            <button role=\"submit\" className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                <span className=\"fa fa-key\"></span>&nbsp;Reset Password\r\n            </button>\r\n            </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  );\r\n}\r\n\r\n//Render the Login Page\r\nrender() {\r\n    return(\r\n    <div id=\"login-mode-div\" className=\"padded-page\">\r\n    <center>\r\n        <h1 />\r\n        <form onSubmit={this.handleLoginSubmit} onChange={this.handleLoginChange}>\r\n        <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24 }}>\r\n            Email:\r\n            <input\r\n            ref={this.emailInputRef}\r\n            className=\"form-control login-text\"\r\n            type=\"email\"\r\n            placeholder=\"Enter Email Address\"\r\n            id=\"emailInput\"\r\n            pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n            required={true}\r\n            />\r\n        </label>\r\n        <p />\r\n        <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24 }}>\r\n            Password:\r\n            <input\r\n            ref={this.passwordInputRef}\r\n            className=\"form-control login-text\"\r\n            type=\"password\"\r\n            placeholder=\"Enter Password\"\r\n            required={true}\r\n            />\r\n        </label>\r\n        <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\r\n        <button\r\n            type=\"submit\"\r\n            className=\"btn-color-theme btn btn-primary btn-block login-btn\">\r\n            <span className={this.state.loginBtnIcon}/>\r\n            &nbsp;{this.state.loginBtnLabel}\r\n        </button>\r\n        <br />\r\n        <p><button type=\"button\" className=\"btn btn-link login-link\" \r\n             onClick={() => {this.setState({showAccountDialog: true});}}>Create an account</button> | \r\n           <button type=\"button\" className=\"btn btn-link login-link\"\r\n             onClick={() => {this.setState({showLookUpAccountDialog: true});}}>Reset your password</button>\r\n        </p>\r\n     \r\n        <a role=\"button\" className=\"login-btn\">\r\n            <img src=\"https://drive.google.com/uc?export=view&id=1YXRuG0pCtsfvbDSTzuM2PepJdbBpjEut\" />\r\n        </a>\r\n        <a role=\"button\" className=\"login-btn\">\r\n            <img src=\"https://drive.google.com/uc?export=view&id=1ZoySWomjxiCnC_R4n9CZWxd_qXzY1IeL\" />\r\n        </a>\r\n        <p>\r\n            <i>IA5 CptS 489 react amplify</i>\r\n        </p>\r\n        <p>\r\n            <i>© 2020 marco ares. all rights reserved.</i>\r\n        </p>\r\n        </form>\r\n        {this.state.showAccountDialog ? this.renderAccountDialog() : null}\r\n        {this.state.showLookUpAccountDialog ? this.renderLookUpAccountDialog() : null}\r\n        {this.state.showSecurityQuestionDialog ? this.renderSecurityQuestionDialog() : null}\r\n        {this.state.showPasswordResetDialog ? this.renderPasswordResetDialog() : null}\r\n    </center>\r\n    </div>\r\n    )\r\n}\r\n}\r\n\r\nexport default LoginPage;","import React from 'react';\r\nimport AppMode from './../AppMode.js';\r\n\r\n//Add Data -- this component presents a controlled form through which the user\r\n//can enter a new data or edit an existing data.\r\nclass DataAdd extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      //Create date object for today, taking time zone into consideration\r\n      let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n      //store date as ISO string\r\n      if (this.props.mode === AppMode.DATA_ADD) {\r\n        this.state = {name: \"\",\r\n                      birthday:  today.toISOString().substr(0,10), \r\n                      faIcon: \"fa fa-save\",\r\n                      btnLabel: \"save data\"}\r\n      } else {\r\n        //if editing an existing data, the starting state is the current data\r\n        //Already added from IA5 but this is for IA6\r\n        this.state = this.props.startData;\r\n        this.state.faIcon = \"fa fa-edit\";\r\n        this.state.btnLabel = \"update data\";\r\n      }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        this.setState({[name]: event.target.value});\r\n      }\r\n  \r\n    //handleSubmit\r\n    handleSubmit = (event) => {\r\n      //start spinner\r\n      this.setState({faIcon: \"fa fa-spin fa-spinner\",\r\n                     btnLabel: (this.props.mode === AppMode.DATA_ADD ? \r\n                                  \"saving...\" : \"updating...\")});\r\n      //Prepare current data to be saved\r\n      let thisData = this.state;\r\n      delete thisData.faIcon;\r\n      delete thisData.btnLabel;\r\n      //call saveData on 1 second delay to show spinning icon\r\n      setTimeout(this.props.saveData,1000,thisData); \r\n      event.preventDefault(); \r\n    }\r\n\r\n  \r\n    //render -- renders the form to enter data.\r\n    render() {\r\n      return (\r\n        <div className = \"padded-page\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <center>\r\n            <label>\r\n              name:\r\n              <input name=\"name\" className=\"form-control form-center\" type=\"text\"\r\n                value={this.state.name} onChange={this.handleChange}\r\n                placeholder=\"full name\" size=\"50\" maxLength=\"50\" />\r\n            </label>\r\n            <p></p>\r\n            <label>\r\n              birthday:\r\n              <input name=\"birthday\" className=\"form-control form-center\" \r\n                type=\"date\" value={this.state.birthday} onChange={this.handleChange} />\r\n            </label>\r\n            <p></p>\r\n            <p></p>\r\n            <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \r\n                className=\"btn btn-primary btn-color-theme\">\r\n                <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}</button>\r\n          </center>\r\n        </form>\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\n  export default DataAdd;","import React from 'react';\r\n\r\nclass FloatingButton extends React.Component {\r\n  \r\n    render() {\r\n      return(\r\n        <div>\r\n          <a className=\"floatbtn\" onClick={(this.props.menuOpen ? null : \r\n             this.props.handleClick)}>\r\n            <span className={\"floatbtn-icon \" + this.props.icon}></span>\r\n          </a>\r\n        </div>  \r\n      );\r\n    }\r\n}\r\n\r\nexport default FloatingButton;","import React from 'react';\r\nimport '../styles/modal.css';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass DataDisplay extends React.Component {\r\n\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    //confirmDelete state variable determines whether to show or hide the\r\n    //confirm delete dialog box\r\n    this.state = {confirmDelete: false}; \r\n  }\r\n\r\n  //editData\r\n  //For IA6\r\n  editData = (id) => {\r\n    this.props.setEditId(id);\r\n    this.props.changeMode(AppMode.DATA_EDIT);\r\n  }\r\n\r\n  //confirmDelete -- Triggered when the user clicks on the delete button\r\n  confirmDelete = (id) => {\r\n    this.props.setDeleteId(id);\r\n    this.setState({confirmDelete: true});\r\n  }\r\n\r\n  //doDelete -- Triggered when the user clicks on the \"Yes Delete\" button\r\n  doDelete = () => {\r\n      this.props.deleteData();\r\n      this.setState({confirmDelete: false});\r\n    }\r\n\r\n  //cancelDelete -- Triggered when the user chooses to cancel a delete\r\n  //operation. We just need to update state to toggle confirmDelete to false\r\n  cancelDelete = () => {\r\n    this.props.setDeleteId(\"\"); \r\n    this.setState({confirmDelete: false});\r\n  }\r\n\r\n  //renderConfirmDeleteDialog: presents user with dialog to confirm deletion\r\n  //of round. Credit: https://getbootstrap.com/docs/4.0/components/modal/\r\n  renderConfirmDeleteDialog = () => {\r\n      return (\r\n        <div className=\"modal\" role=\"dialog\">\r\n          <div className=\"modal-content\">\r\n              <div className=\"modal-header\">\r\n                <p className=\"modal-title\">confirm deletion</p>\r\n                  <button className=\"close-modal-button\" onClick={this.cancelDelete}>\r\n                    &times;</button>\r\n              </div>\r\n              <div className=\"modal-body\">\r\n                <h4>you sure that you want to delete this?</h4>\r\n                <div className=\"modal-footer\">\r\n                    <button className=\"btn btn-primary btn-color-scheme\"\r\n                      onClick={this.doDelete}>\r\n                    yes, delete round</button>\r\n                    <button className=\"btn btn-secondary\" \r\n                      onClick={this.cancelDelete}>\r\n                    no, do not delete round</button>\r\n                </div>\r\n              </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n\r\n  //renderTable -- render an HTML table displaying the rounds logged\r\n  //by the current user and providing buttons to view/edit and delete each round.\r\n  renderTable = () => {\r\n    let table = [];\r\n    for (const r in this.props.name) {\r\n      table.push(\r\n        <tr key={r}>\r\n          <td>{this.props.name[r].name}</td>\r\n          <td>{this.props.name[r].birthday}</td>\r\n          <td><button onClick={this.props.menuOpen ? null : () => this.editData(r)}>\r\n                <span className=\"fa fa-edit\"></span></button></td>\r\n          <td><button onClick={this.props.menuOpen ? null : () => this.confirmDelete(r)}>\r\n                <span className=\"fa fa-trash\"></span></button></td>\r\n        </tr> \r\n    );\r\n  }\r\n  return table;\r\n}\r\n\r\n  //render--render the entire rounds table with header, displaying a \"No\r\n  //Rounds Logged\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n    <div className=\"padded-page\">\r\n      <h1></h1>\r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n          <th>name</th>\r\n          <th>birthday</th>\r\n          <th>view/edit...</th>\r\n          <th>delete</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Object.keys(this.props.name).length === 0 ? \r\n          <tr>\r\n          <td colSpan=\"4\" style={{fontStyle: \"italic\"}}>no data logged</td>\r\n          </tr> : this.renderTable()\r\n          }\r\n        </tbody>\r\n      </table>\r\n      {this.state.confirmDelete ? this.renderConfirmDeleteDialog() : null}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DataDisplay;","import React from 'react';\r\nimport DataAdd from './DataAdd.js';\r\nimport FloatingButton from './FloatingButton.js';\r\nimport AppMode from './../AppMode.js';\r\nimport DataDisplay from './DataDisplay.js';\r\n\r\nclass DataPage extends React.Component {\r\n\r\n    //Initialize objects based on local storage\r\n    constructor(props) {\r\n          super(props);\r\n          let data = JSON.parse(localStorage.getItem(\"userData\")); \r\n          this.state = {name: data[this.props.userId].name,\r\n                        nameCount: data[this.props.userId].nameCount,\r\n                        deleteId: \"\",\r\n                        editId: \"\"};          \r\n    }\r\n\r\n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\r\n    //the user is considering deleting.\r\n    setDeleteId = (val) => {\r\n        this.setState({deleteId: val});\r\n    }\r\n\r\n    //setEditId -- Capture in this.state.editId the unique id of the item\r\n    //the user is considering editing.\r\n    setEditId = (val) => {\r\n        this.setState({editId: val});\r\n    }\r\n \r\n    //This is where the local storage for editing data is\r\n    editData = (newData) => {\r\n        let data = JSON.parse(localStorage.getItem(\"userData\")); \r\n        let newName = this.state.name;\r\n        newName[this.state.editId] = newData;\r\n        data[this.props.userId].name = newName;\r\n        localStorage.setItem(\"userData\",JSON.stringify(data));\r\n        this.setState({name: newName, editId: \"\"});\r\n        this.props.changeMode(AppMode.DATA);\r\n    }\r\n\r\n    deleteData = () => {\r\n        let data = JSON.parse(localStorage.getItem(\"userData\"));\r\n        let newName = this.state.name;\r\n        delete newName[this.state.deleteId];\r\n        data[this.props.userId].name = newName;\r\n        localStorage.setItem(\"userData\",JSON.stringify(data));\r\n        this.setState({name: newName, deleteId: \"\"});\r\n    }\r\n\r\n    addData = (newData) => {\r\n        let data = JSON.parse(localStorage.getItem(\"userData\"));\r\n        let newName = this.state.name;\r\n        newData.nameNum = this.state.nameCount + 1;\r\n        newName[this.state.nameCount + 1] = newData;\r\n        data[this.props.userId].name = newName;\r\n        data[this.props.userId].nameCount = this.state.nameCount + 1;\r\n        localStorage.setItem(\"userData\",JSON.stringify(data));\r\n        this.setState({name: newName, nameCount: newData.nameNum});\r\n        this.props.changeMode(AppMode.DATA);\r\n    }\r\n\r\n    \r\n    //render\r\n    render() {\r\n        switch(this.props.mode) {\r\n            case AppMode.DATA:\r\n                return (\r\n                  <React.Fragment>\r\n                  <DataDisplay \r\n                    name={this.state.name}\r\n                    setEditId={this.setEditId}\r\n                    setDeleteId={this.setDeleteId}\r\n                    deleteData={this.deleteData}\r\n                    changeMode={this.props.changeMode}\r\n                    menuOpen={this.props.menuOpen} /> \r\n                  <FloatingButton\r\n                      handleClick={() => \r\n                        this.props.changeMode(AppMode.DATA_ADD)}\r\n                      menuOpen={this.props.menuOpen}\r\n                      icon={\"fa fa-plus\"} />\r\n                  </React.Fragment>\r\n                );\r\n            case AppMode.DATA_ADD:\r\n                return (\r\n                    <DataAdd\r\n                       mode={this.props.mode}\r\n                       startData={\"\"} \r\n                       saveData={this.addData} />\r\n                );\r\n            case AppMode.DATA_EDIT:\r\n                return (\r\n                    <DataAdd\r\n                      mode={this.props.mode}\r\n                      startData={this.state.name[this.state.editId]} \r\n                      saveData={this.editData} />\r\n                );\r\n        }\r\n    }\r\n}    \r\n\r\n    export default DataPage;","import React from 'react';\r\nimport Delta from './../delta.png'\r\n\r\nclass ConstructionPage extends React.Component {\r\n\r\n       render() {\r\n        return (\r\n        <div className=\"padded-page center\">\r\n            <h1>mode 2</h1>\r\n            <h2>this page is under construction.</h2>\r\n            <img src={Delta} \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>\r\n            version cpts 489 IA5<br/>\r\n            &copy; 2020 marco ares. all rights reserved.</p>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default ConstructionPage;","import React from 'react';\r\nimport NavBar from './NavBar.js';\r\nimport SideMenu from './SideMenu.js';\r\nimport ModeBar from './ModeBar.js';\r\nimport AppMode from './../AppMode.js';\r\nimport LoginPage from './LoginPage.js';\r\nimport DataPage from './DataPage.js';\r\nimport ConstructionPage from './ConstructionPage.js'\r\nimport Delta from './../delta.png'\r\n\r\nconst modeTitle = {};\r\nmodeTitle[AppMode.LOGIN] = \"welcome to IA6: login\";\r\nmodeTitle[AppMode.DATA] = \"my data\";\r\nmodeTitle[AppMode.DATA_ADD] = \"add data\";\r\nmodeTitle[AppMode.DATA_EDIT] = \"edit data\";\r\nmodeTitle[AppMode.CONSTRUCTION] = \"under construction\";\r\n\r\nconst modeToPage = {};\r\nmodeToPage[AppMode.LOGIN] = LoginPage;\r\nmodeToPage[AppMode.DATA] = DataPage;\r\nmodeToPage[AppMode.DATA_ADD] = DataPage;\r\nmodeToPage[AppMode.DATA_EDIT] = DataPage;\r\nmodeToPage[AppMode.CONSTRUCTION] = ConstructionPage;\r\n\r\nclass App extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {mode: AppMode.LOGIN,\r\n                      menuOpen: false,\r\n                      userId: \"\",\r\n                      showAbout: false};\r\n        }\r\n\r\n    handleChangeMode = (newMode) => {\r\n        this.setState({mode: newMode});\r\n    }\r\n        \r\n    openMenu = () => {\r\n        this.setState({menuOpen : true});\r\n    }\r\n          \r\n    closeMenu = () => {\r\n        this.setState({menuOpen : false}); \r\n    }\r\n        \r\n    toggleMenuOpen = () => {\r\n        this.setState(prevState => ({menuOpen: !prevState.menuOpen}));\r\n    }\r\n        \r\n    setUserId = (Id) => {\r\n        this.setState({userId: Id});\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"click\",this.handleClick);\r\n    }\r\n\r\n    handleClick = (event) => {\r\n        if (this.state.menuOpen) {\r\n          this.closeMenu();\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    toggleAbout = () => {\r\n        this.setState(prevState => ({showAbout: !prevState.showAbout}));\r\n    }\r\n    \r\n    renderAbout = () => {\r\n        return (\r\n          <div className=\"modal\" role=\"dialog\">\r\n            <div className=\"modal-dialog modal-lg\">\r\n              <div className=\"modal-content\">\r\n                <div className=\"modal-header\">\r\n                  <h3 className=\"modal-title\"><b>about</b>\r\n                    <button className=\"close-modal-button\" onClick={this.toggleAbout}>\r\n                      &times;</button>\r\n                  </h3>\r\n                </div>\r\n                <div className=\"modal-body\">\r\n                  <img\r\n                  src={Delta}\r\n                  height=\"200\" width=\"200\"/>\r\n                  <h3>this is IA6 by marco ares</h3>\r\n                  <p>version cpts489 spring 2020<br/>\r\n                  &copy; 2020 student at washington state university. all rights\r\n                  reserved.\r\n                  </p>\r\n                  <div style={{textAlign: \"left\"}}>\r\n                    <p>IA6 apps support</p>\r\n                    <p>this assignment is made by react that we learned in class\r\n                        in the past week and a half. mostly the code that i have \r\n                        here is helped by going to class and looking at his code.\r\n                        without that i would be lost in what i am doing because \r\n                        react is a hard language to learn in a short period of time,\r\n                        but hey.. we are here now and im learning this bs and hopefully\r\n                        i get a good grade for this. i am honestly super tired. \r\n                        but it is what is. now for IA6 i need more commits so im adding this,\r\n                        even though i am done with the assignment.\r\n                    </p>\r\n                    <p>follow me in instagram to support me<a\r\n                    href=\"https://www.instagram.com/jmarcoares/\" target=\"_blank\">@jmarcoares</a>\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-primary btn-color-theme\"\r\n                    onClick={this.toggleAbout}>OK</button>\r\n                  </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const ModePage = modeToPage[this.state.mode];\r\n        return (\r\n          <div onClick={this.handleClick}>\r\n            <NavBar \r\n              title={modeTitle[this.state.mode]}\r\n              mode={this.state.mode}\r\n              changeMode={this.handleChangeMode}\r\n              menuOpen={this.state.menuOpen}\r\n              toggleMenuOpen={this.toggleMenuOpen}/>\r\n            <SideMenu \r\n              mode={this.state.mode}\r\n              menuOpen={this.state.menuOpen}\r\n              changeMode={this.handleChangeMode}\r\n              userId={this.state.userId}\r\n              showAbout={this.toggleAbout}/>\r\n            <ModeBar \r\n              mode={this.state.mode} \r\n              changeMode={this.handleChangeMode}\r\n              menuOpen={this.state.menuOpen}/>\r\n            <ModePage menuOpen={this.state.menuOpen}\r\n              mode={this.state.mode} \r\n              changeMode={this.handleChangeMode}\r\n              userId={this.state.userId}\r\n              setUserId={this.setUserId}/>\r\n            {this.state.showAbout ? this.renderAbout() : null}\r\n          </div>\r\n          );  \r\n      }\r\n\r\n    \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './styles/index.css';\r\nimport './styles/modal.css';\r\nimport App from './components/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/delta.b12cb12c.png\";"],"sourceRoot":""}